cmake_minimum_required (VERSION 2.6)

# Maps to Visual Studio solution file (Tutorial.sln)
# The solution will have all targets (exe, lib, dll) 
# as Visual Studio projects (.vcproj)
PROJECT(BloodJob)

SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin )
# Turn on the ability to create folders to organize projects (.vcproj)
# It creates "CMakePredefinedTargets" folder by default and adds CMake
# defined projects like INSTALL.vcproj and ZERO_CHECK.vcproj
#set_property(GLOBAL PROPERTY USE_FOLDERS ON)

#if ( CMAKE_COMPILER_IS_GNUCC )
    # This is tested
    #set_property( TARGET CoreSim APPEND_STRING PROPERTY COMPILE_FLAGS
    # -Wwrite-strings )
#  add_definitions("-pg")
#endif ( CMAKE_COMPILER_IS_GNUCC )
######################################################
## For debugging and memory checking on Linux       ##
## run with >valgrind --leak-check=full IORCoreSimX ##
######################################################
#IF(WIN32)
# Set compiler flags and options. 
# Here it is setting the Visual Studio warning level to 4
#  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
#ELSE()
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
#SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
#SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
#ENDIF(WIN32)
#IF( CMAKE_SYSTEM_NAME STREQUAL "Linux" )
# SET ( CMAKE_CXX_FLAGS "-Wwrite-strings" CACHE STRING "compile flags" FORCE)
#ENDIF()

# Command to output information to the console
# Useful for displaying errors, warnings, and debugging
message ("cxx Flags: " ${CMAKE_CXX_FLAGS})

# Sub-directories where more CMakeLists.txt exist
ADD_SUBDIRECTORY( src/BloodJob )
ADD_SUBDIRECTORY( src/Body    )



